#+options: todo:t
#+title: Architecture Decision Records
#+date: <2024-02-15 Do>
#+author: Christian Egli
#+email: christian.egli@sbs.ch
#+language: en

#+TODO: DRAFT PROPOSED | ACCEPTED REJECTED DEPRECATED SUPERSEDED

* ACCEPTED Implicit headings
CLOSED: [2025-07-10 Do 13:57]
- Deciders :: CE, MK, FW, US
- Date :: [2025-04-03 Do]

In traditional print books, it is often the case that certain sections
in the front and back matter do not have explicit headings. Their
purpose is understood by visual cues or by convention. Examples
include dedications, epigraphs, acknowledgments, colophons, or author
biographies.

While these sections work without explicit headings in print, digital
formats like E-books require actual headings to enable navigation.
However, in formats such as Braille or Large Print, we omit these
headings to maintain fidelity with the original print edition.

** Context and Problem Statement

The XML source code of the book needs to have some indication which
headings are implicit and should only be shown in E-Books. This is
currently handled in a very simple way: We do not add any headings to
the XML source that do not exist in the book.

However since we need headings in the E-Books, we currently just add a
boilerplate heading to sections where it is missing. So both a
dedication or an acknowledgment will have a generic heading
"Vorspann". This is not very satisfying.

At the same time there is an effort to standardize the names of these
implicit headings.

So we need a way to give these headings a label and mark them as
implicit.

** Decision Drivers

- Simple for the transcriber :: It should be simple to add an implicit
  heading without having to resort to complicated mechanisms such as
  ~brl:select~ macros.
- Standardized :: As we would like to standardize the implicit
  headings there should be a structured way to insert these headings,
  that leaves little room for errors.
- Open :: While we want to standardize the possible headings, there is
  not finite set of implied headings in the books we transcribe.
  Attempting to settle on a fixed set of standardized headings is
  futile. A solution needs to be open and allow for new situations.
- Backwards compatible :: We are not going to migrate our existing
  corpus of XML source files, so any solution needs to be able to
  handle both the old format and a possible new format seamlessly.
- Stay close to the existing XML standard :: We are free to invent our
  own XML standard to handle implicit headings. However, deviating
  from the XML standard has a high long term cost. We need to adapt
  the upstream off-the-shelf conversion software to our changes, not
  just once but for each upstream release. Also we will not get any
  support from upstream for our local changes.

  This is already a big problem for our E-Book production where we are
  stuck with an ancient version of the upstream conversion software
  because of our local changes.

** Considered Options

*** Conventions
Instead of adding some new markup to the XML we indicate implicit
headings with some convention. We already use a similar technique for
the braille title page. For example the third ~level1~ in the front
matter would always contain the implicit sections, where the first
~level2~ would be the dedication, the second ~level2~ would be the
acknowledgments and so forth. We would have to maintain a mapping
between ~level2~ number and type of section. Also each type would have
to be implemented in code.

*** Select macro
Enhance the ~brl:select~ macros to allow for selecting content only
for certain output formats.

*** Aria role
The implicit levels are marked with an aria role which specifies the
role of the section.

#+begin_src xml
  <level2 aria:role="doc-dedication">Für meinen Hund</level2>
#+end_src

The DAISY Consortium and the W3C even more so, maintain a
comprehensive vocabulary of structural semantics, so we will not have
to create our own list and can follow a standard.

- [[https://kb.daisy.org/publishing/docs/html/dpub-aria/index.html][Digital Publishing Roles]] (vocabulary from the DAISY Consortium)
- [[https://www.w3.org/TR/dpub-aria/][Digital Publishing WAI-ARIA Module 1.1]] (vocabulary from W3C)
- [[https://www.w3.org/TR/epub-ssv/][EPUB 3 Structural Semantics Vocabulary 1.1]] (vocabulary related to EPB3)

Giving an element a role has benefits beyond just E-Book navigation:
The role can be used in the EPUB to enhance accessibility. It could
also be used in Braille for formatting, etc.

This would be a closed solution as there is a large but finite set of
roles. In the rare case where no pre-defined role is suitable for a
section then the rendered E-Book will fall back to the standard
"Vorspann" as we have it now.

*** Aria label
We give the sections without a heading a special aria label which will
be used as the heading for that section. When converting this content
to an E-Book it will be rendered as a heading. This is basically a
simplified version of [[*A specific class value][A specific class value]].

#+begin_src xml
  <level2 aria:label="Widmung">Für meinen Hund</level2>
#+end_src

- https://www.w3.org/TR/dpub-aria/
- https://w3c.github.io/aria/#aria-label

*** Aria role with aria label fallback
The [[*Aria role][Aria role]] solution is a closed solution, as there is a finite set
of pre-defined roles.

In the rare case where no pre-defined role is suitable for a
section we can fall back to using an aria label. So this solution is
essentially a combination of [[*Aria role][Aria role]] and [[*Aria label][Aria label]].

*** A new dedicated attribute
We mark implicit headings with a dedicated attribute.

#+begin_src xml
  <level1>
    <h1 implicit="true">Widmung</h1>
  </level1>
#+end_src

*** A specific class value
Implicit headings are marked with a special class name.

#+begin_src xml
  <level1>
    <h1 class="implicit">Widmung</h1>
  </level1>
#+end_src

*** Reuse an existing attribute from the standard
There are some attributes in the DTBook standard that could be used to
indicate implicit headings. We could use the ~render~ attribute or
some form of the ~showin~ attribute.

** Decision Outcome

Chosen option: A specific class value (class="implicit"), because it
is a simple solution that can be implemented quickly. The solution
with the aria role was deemed too far reaching, as it apparently
implies we are actually implementing aria roles. Also the the role
solution prevented inline markup in the headings, a feature that is
apparently essential.

*** Positive Consequences

- Implementation is relatively straight-forward.
- Transcribers have all the freedom to choose an appropriate
  (implicit) title

*** Negative Consequences

- Standardization is only on a voluntary bases, i.e. the standard
  vocabulary will be collected on a wiki page. There will be no
  validation of the values of the implicit headings.
- If we ever choose to use aria roles we will have to somehow migrate
  the implicit headings to a role.

** Pros and Cons of the Options
:PROPERTIES:
:COLUMNS:  %ITEM %Standardization %CloseToSchema %Flexibility %EaseOfUse %Complexity
:Standardization_ALL: 0 1 2
:CloseToSchema_ALL: 0 1 2
:Flexibility_ALL: 0 1 2
:EaseOfUse_ALL: 0 1 2
:Complexity_ALL: 0 1 2
:END:

*** Conventions
:PROPERTIES:
:STANDARDIZATION: 2
:CLOSETOSCHEMA: 2
:FLEXIBILITY: 1
:EASEOFUSE: 0
:COMPLEXITY: 2
:END:
- Good :: No change to the DTBook schema is needed
- Good :: Compliant with the DTBook standard
- Good :: The solution is "open" but in a very clunky way, i.e. you
  can always add one more ~level2~ and define is as special section,
  but you will have to wait until CE implements it.
- Bad :: Usage for transcribers is very hard, as very little is
  explicit, i.e. "which h2 is for dedication again?"

*** Select macro
:PROPERTIES:
:CLOSETOSCHEMA: 1
:STANDARDIZATION: 0
:FLEXIBILITY: 2
:EASEOFUSE: 0
:COMPLEXITY: 2
:END:
- Good :: Very flexible
- Bad :: Works against standardization, i.e. too flexible
- Bad :: Change to the DTBook schema is needed
- Bad :: Not close to the DTBook standard
- Bad :: Usage for transcribers is fairly complicated

*** Aria role
:PROPERTIES:
:STANDARDIZATION: 2
:CLOSETOSCHEMA: 0
:FLEXIBILITY: 0
:EASEOFUSE: 2
:COMPLEXITY: 0
:END:
- Good :: Intent of markup is very clear, i.e. easy for transcribers
  to understand and use
- Good :: Reuse of existing work by DAISY and W3C
- Good :: The vocabulary is very well defined and documented
- Good :: as the set of roles is standardized there is little room for error
- Good :: Schema validation is easy
- Bad :: Change to the DTBook schema is needed
- Bad :: Deviates from the DTBook standard, but complies with the
  extension mechanism

*** Aria label
:PROPERTIES:
:STANDARDIZATION: 0
:CLOSETOSCHEMA: 0
:FLEXIBILITY: 2
:EASEOFUSE: 1
:COMPLEXITY: 0
:END:
- Good :: is a simpler, more loose version of a specific class value
- Good :: Intent of markup is fairly clear
- Bad :: There is mo strict schema validation as label can contain anything
- Bad :: Change to the DTBook schema is needed
- Bad :: Ensuring that the label is only used in the front- and
  rearmatter is complicated.

*** Aria role with aria label fallback
:PROPERTIES:
:STANDARDIZATION: 0
:CLOSETOSCHEMA: 0
:FLEXIBILITY: 2
:EASEOFUSE: 1
:COMPLEXITY: 1
:END:
- Good :: not a closed set of roles as Aria role
- Bad :: Due to the free-form nature looses pretty much all of the
  benefits of the Aria role solution

*** A new dedicated attribute
:PROPERTIES:
:STANDARDIZATION: 0
:CLOSETOSCHEMA: 1
:FLEXIBILITY: 2
:EASEOFUSE: 1
:COMPLEXITY: 1
:END:
- Good :: Intent of markup is very clear, i.e. easy for transcribers
  to understand and use
- Good :: Schema validation is easy
- Bad :: Change to the DTBook schema is needed
- Bad :: Not close to the DTBook standard

*** A specific class value
:PROPERTIES:
:STANDARDIZATION: 0
:CLOSETOSCHEMA: 2
:FLEXIBILITY: 2
:EASEOFUSE: 1
:COMPLEXITY: 1
:END:
- Good :: Intent of markup is very clear, i.e. easy for transcribers
  to understand and use
- Good :: Schema validation is fairly easy
- Good :: Compliant with the DTBook standard
- Bad :: Strict schema validation only works with the minimal schema
- Bad :: Change to the minimal DTBook schema is needed
- Bad :: Ensuring that the class is only used in the front- and
  rearmatter requires Schematron, a more complicated validation
  mechanism.

*** Reuse an existing attribute from the standard

**** Using the ~render~ attribute
:PROPERTIES:
:COMPLEXITY: 2
:EASEOFUSE: 0
:FLEXIBILITY: 2
:CLOSETOSCHEMA: 2
:STANDARDIZATION: 0
:END:
The ~render~ attribute is used for producer notes to indicate whether
it is optional to render them. We could extend it and attach it
additional meaning to indicate whether an heading should be rendered
for a certain format.

- Bad :: Intent of markup is not clear, as we use the same attribute
  for different use cases
- Bad :: Change to the DTBook schema is needed
- Bad :: Not close to the DTBook standard

**** Using the ~showin~ attribute
:PROPERTIES:
:STANDARDIZATION: 0
:CLOSETOSCHEMA: 2
:FLEXIBILITY: 2
:EASEOFUSE: 1
:COMPLEXITY: 2
:END:
The ~showin~ attribute is an odd duck. It lets the transcriber specify
how an element is to be shown in the three formats braille, large
print or print (whatever that means). To show an element only in
braille you'd use ~<h1 showin="bxx">Widmung</h1>~. The standards
creators realized that this attribute was a mistake and deprecated it.

- Good :: Compliant with the DTBook standard
- Good :: No change to the DTBook schema is needed
- Bad :: Deprecated, i.e. upstream conversion tools might no longer
  support it
- Bad :: Intent of markup is not totally clear, i.e. hard for
  transcribers to use and easy to misuse

** Links
- [[https://github.com/sbsdev/dtbook-schema/blob/master/src/main/schema/dtbook-2005-3.rnc][DTBook schema]]
- [[https://github.com/sbsdev/dtbook-schema][SBS Extensions to the DTBook schema]]
- [[https://daisy.org/guidance/info-help/guidance-training/standards/daisy-structure-guidelines/][Structuring Guidelines]]

* ACCEPTED State transition
CLOSED: [2024-04-24 Mi 11:59]
- Deciders :: CE
- Date :: [2024-04-23 Di]

Daisyproducer has the concept of state of a production. In theory it
is quite powerful but in practice none of this power is needed. We
want to simplify the state handling (not only in the code but also for
the user).

** Context and Problem Statement

Daisyproducer historically always had quite an elaborate way to handle
state. In reality however the only real reason to have a state for a
production is to limit the number of productions shown on the start
page. Besides, the "real" state of a production is kept in the Order
Management System (ABACUS) anyway. So we only really used the states
"new" and "in_production" for productions that are not completed yet
and "finished" for completed productions.

With the new start page that dynamically shows productions based on a
search string we no longer need to partition the productions that are
not completed.

The only real remaining reason to have a state is to be able to clean
up once a production is finished.

** Decision Drivers

- simplify the code
- simplify the user experience

** Considered Options

- Simplify states :: Migrate the db and use the simplified states
  throughout. At the same time we also rename the states to better
  reflect their meaning: A production will be either "Open" or
  "Closed".
- Keep the old states :: Keep the old states in the db but use the
  back-end to put a facade over it and have the rest of the system use
  the simplified states from the facade.

** Decision Outcome

Chosen option: *Simplify states*. While this option makes the rollback
harder it is certainly a better fit for the future. There is only one
set of state names and they are used throughout the application, be
that the db, the back end or the user interface.

*** Positive Consequences

- Conceptually the state handling is much simpler
- The same state names are used throughout

*** Negative Consequences

- Rollback will not be that easy
- The users will have to adapt to the new state names (unless we hide
  the names in the i18n translation)

** Pros and Cons of the Options

*** Simplify states

There will only be two states "Open" and "Closed". The existing state
"new" will be dropped and the states "in_production" and "finished"
will be renamed.

- Good :: state handling will be more sane as the states are called by
  the same name, be that in the db, the back-end or the user interface
- Bad :: Rollback will be somewhat difficult, as the "new" state will
  have to be recreated and all productions have been set to "open".

*** Keep the old states

The db will remain (almost) the same. The names of the states will
stay, all productions with state "new" will be set to state
"in_production" however.

- Good :: Rollback is still somewhat possible aside from the problem
  that the "new" productions cannot be reconstructed
- Bad :: There are different state names in the db than in the rest of
  the application

** Links

* ACCEPTED Deployment Scenarios
CLOSED: [2024-04-23 Di 15:46]
- Deciders :: CE, MK, US, MM
- Date :: [2024-02-29 Do]

We have a legacy system, a Python2/Django application, that powers the
production of books. The Django framework has enabled us to create the
application quickly but limits us now as we need to have more advanced
access to the database. That is why all of the newer functionality is
written using Clojure, Clojurescript and React.

The two web applications run side by side and provide more or less
separate functionality.

The goal is however to eventually replace all of the Python2/Django
application with Clojure. As this is a lot of work and doesn't bring
any tangible user value, we'd like to do this gradually while
implementing new features.

** Context and Problem Statement

When implementing the ignore feature for unknown words we had to move
the file upload to the new application. So now there are two places
where a user can upload a file. When using the old upload the unknown
words will not work correctly. This is confusing to the user.

However, the upload not just in the upload form, it is also contained
in the inline editor where the user an edit the DTBook XML and save,
aka upload, a new version.

** Decision Drivers

- We want to replace the Python2/Django application eventually,
  probably not now though
- There should be only one way to upload a file for the user
- We would like the migration to be a gradual process, minimizing the
  risk at each step
- There should be as little change in the UI as possible to avoid
  confusing the user

** Considered Options

- D-Day :: Only deploy once *everything* is migrated
- Strangler :: Replace functionality piece by piece
- Parallel :: Deploy new functionality without removing the old one

** Decision Outcome

Chosen option: *D-Day*. Initially we prefered the Strangler option for
its reduced risk and the incremental approach. However when looking at
the two UIs we realized that this is too confusing for the user to
have two seemingly unrelated UIs. We think that it is not that much
more effort to port everything to the new UI at which point we will
have a disruption in the UI but it is consistent and there is only one
disruption (instead of several smaller ones)

*** Positive Consequences

- There is only one way to upload
- The UI is consistent
- Everything will have been migrated from the legacy to the new
  application

*** Negative Consequences

- Iteration2 will take longer as we will also have to implement
  - download of end products
  - state switching

** Pros and Cons of the Options

*** D-Day

Nothing is deployed before everything is migrated.

- Good :: The UI is consistent
- Bad :: Takes a long time to deliver
- Bad :: High risk (all or nothing)
- Bad :: Potential user experience disruption
- Bad :: Significant upfront investment
- Bad :: Implement things that might not be needed

*** Strangler

As we migrate functionality from the old system to the new we will
simply hide it in the old system. This is basically what we have been
doing for the last year.

The implication of this is that (since we migrated the file upload
functionality) we will also have to migrate the markup editor since it
essentially also does file upload. However this might be a lot of work
that we did not plan to do at this time.

As it turns out the markup editor is extremely simple: it is basically
just a textarea inside a form. Maybe it would not be that much work to
migrate it.

- Good :: The changes are incremental for the user
- Bad :: More work than we had anticipated
- Bad :: The old UI will look pretty bare and have very little
  functionality
- Bad :: The old UI has very little functionality now. It is very
  confusing for the user to have those two UIs that have to be
  switched between

*** Parallel

We leave both UIs as they are and let the user choose which one she
will use.

- Good :: No need to change the legacy app
- Bad :: Confusing for the user as there are two ways to upload a file
  which behave slightly differently

** Links

- an article from Microsoft Learn about the [[https://learn.microsoft.com/en-us/azure/architecture/patterns/strangler-fig][Strangler Fig pattern]]
- [[https://medium.com/@josesousa8/the-strangler-pattern-kill-legacy-like-a-boss-db3db41564ed][The Strangler Pattern: Kill Legacy Like a Boss]]

* ACCEPTED "Unignore" unknown words
CLOSED: [2025-02-13 Do 14:11]
- Deciders :: CE, MK
- Date :: [2024-02-21 Mi]

Unknown words can be "ignored", i.e. marked as ignored and they will
be put at the end of the list. In the paginated view of the unknown
words an ignored word will simply show up on the last page once the
transcriber has worked though all the non-ignored words.

** Context and Problem Statement

When an unknown word is confirmed an entry for this word is created in
the table for local words. The entry in the table for unknown words is
not changed. However the query for unknown words will no longer
contain that word in the resultset, as it only returns unknown words
that are not in the local words table.

So when a local word is deleted the query for unknown words will
return that word again in its resultset. So far all is fine.

However, as the row for that word in the table for unknown words has
not been touched, the unknown word will still be marked as ignored.
Does that make sense? And in a broader sense: do we need a way to
"unignore" an unknown word?

Another UI problem is that when a word is ignored it is updated in the
db and dropped from the current pagination window. There is no
re-fetch of the current pagination window. This can cause problems
when the ignored word should show up in the same window again (maybe
there is only one window left). But does a user really ignore a word
when they are in the last window?

** Decision Drivers

- Make the UI as simple as possible
- Make the UI as understandable as possible
- Make the REST API as constrained as possible
  - i.e. do not make the PUT end point of local words also reset the
    ignored status of the same unknown word
- Do not waste big engineering effort on small fish

** Considered Options

- Ignore the problem :: the use case is so rare that the users will
  almost never run into this situation
- Disable ignore button for ignored words :: Basically the same as
  ignoring the problem but make it visible that a word is ignored by
  disabling the button. "Ignoring" an already ignored unknown word
  indeed does not make much sense.
- Separate tab :: Keep the ignored words in a separate tab. Since
  switching to a tab causes a re-fetch, the problem of pagination with
  re-fetch just goes away
- Add an "Unignore" button :: Make the "Ignore" button a toggle that
  lets you ignore and "unignore" a word
- Clear the ignored state on confirm :: When confirming an unknown
  word set the ignored flag to false

** Decision Outcome

Chosen option: "Disable ignore button for ignored words", because the
problem is so rare that it does not warrant a complication of the
day-to-day user interface. The chosen option is to basically ignore
the problem but make it slightly more visible to the user that a word
is ignored.

*** Positive Consequences

- The UI stays simple

*** Negative Consequences

- There are slight inconsistencies around ignored words when you are
  on the last page or when you delete a formerly ignored word from the
  list of local words.

** Pros and Cons of the Options

*** Ignore the problem

- Good :: already done :-)
- Bad :: doesn't really solve the issue

*** Disable ignore button for ignored words

Basically the same as [[*Ignore the problem][Ignore the problem]] but at least the button to
ignore is disabled for ignored words.

- Good :: The UI is more consistent
- Bad :: doesn't really solve the issue

*** Separate tab

Add a separate tab for ignored words. Because switching to the tab
causes a refresh, we will not have the weird problems with pagination.
However the UI is getting cluttered up with another rarely used tab.

- Good :: The pagination of ignored words is more consistent
- Bad :: Clutter in the UI to solve a minuscule problem
- Bad :: A solution in search of a problem

*** Add an "Unignore" button

The "Ignore" button is more like a toggle that lets the user toggle
the isIgnored state. But then you get some weird UI issues where an
unignored entry disappears (as it is sorted back where it originally
was) where it should be back (as we are on the page it was
originally).

- Good :: seems simple and orthogonal
- Bad :: Weird UI issues with unignored words and pagination
  - These are really confusing for the user
  - and hard to fix properly

*** Clear the ignored state on confirm

When the word is confirmed, i.e. inserted into the local words table,
the isIgnored flag in the unknown words table is cleared. The happy
path seems quite sane, but what happens in the case of failure?

- Good :: A clear and easy to understand solution for the user
- Bad :: Where do you put the responsibility for this? In the UI? In
  the REST API?
- Bad :: Hard to implement the failure cases right


** Links

* ACCEPTED Show totals in paginated views
CLOSED: [2024-02-20 Di 11:26]
- Deciders :: CE
- Date :: [2024-02-15 Do]

** Context and Problem Statement

The query to get the unknown words is very complex and costly. It
currently only returns a subset of the unknown words as they are
paginated in the UI anyway. Now we would also like to see the total of
the unknown words. How do we display the total without having to do
the expensive query twice?

** Decision Drivers

- The request to get the unknown words needs to be fast

** Considered Options

- Two selects :: Using two selects, first using LIMIT and then a
  second one to get the total
- Independent selects :: There are two selects as above and the client
  asks for the information separately. I.e. the client determines when
  it asks for the information and how much of it is cached and locally
  maintained.
- ~SQL_CALC_FOUND_ROWS~ :: Using ~SQL_CALC_FOUND_ROWS~ as outlined in
  [[https://stackoverflow.com/q/818567][MySQL pagination without double-querying?]]

** Decision Outcome

Chosen option: "Independent selects", firstly because MySQL seems to
shy away from the ~SQL_CALC_FOUND_ROWS~ solution. It is deprecated as
of 8.0.17, see https://stackoverflow.com/a/62328373. Secondly leaving
it up to the client when to fetch the totals information gives us more
room for optimization, such as caching and/or just approximated
totals.

*** Positive Consequences

*** Negative Consequences

- Most of the code for the second query (to get the total) is
  duplicated from the first query. It is not quite the same though as
  it can be kept simpler.

** Pros and Cons of the Options

*** Two selects

There are two selects, but they could possibly be combined in one REST
end point. This ties the two together at least from the POV of the
client. This can make sense some time but probably most of the time
the two concerns are separate.

- Bad :: complects two mostly independent concerns

*** Independent selects

There are two concerns:

1. get a possibly paginated set of words
2. get the total number of words

These two concerns can be nicely served be two requests. The first one
is plain old REST call (~GET /api/collection~) to get the list of
words. The second one is a bit special and the idea comes from this [[https://stackoverflow.com/q/1610862][SO
question]] about "Getting a count of returns seen by a RESTful
request". The basic idea is that you send a ~HEAD~ request to the
collection and the response contains the count as meta data in the
headers.

- Good :: separates fetching the words from fetching the count
- Good :: the count just returns meta data without a body

*** ~SQL_CALC_FOUND_ROWS~

Even MySQL is dropping it, so that one is out

- Bad :: deprecated, see https://stackoverflow.com/a/62328373

** Links

- https://stackoverflow.com/q/1610862

* ACCEPTED Cleanup of dictionary_unknownword table
CLOSED: [2024-02-16 Fr 09:24]
- Deciders :: CE
- Date :: [2024-02-15 Do]

To calculate the unknown words there is some sort of a "temporary"
table that holds the extracted words from a document. This table
should probably be cleaned up once the document has been finished.

** Context and Problem Statement

The calculation of the unknown words is expensive. Previously they
were calculated when the request came in. Now the extraction of
unknown words from the XML is done when the XML is uploaded. But these
words aren't removed from the table ever. Should they be removed?

** Decision Drivers

- many rows in the table make the very complex SQL query to find
  unknown words slower
- removing them when the status changes couples the two actions too
  much, i.e. the state change and the cleanup
- Potentially there could be many cleanup jobs
  - cleanup unknown words
  - remove images
  - remove old versions
- the user is not interested in the cleanup, i.e. this is just an
  implementation detail

** Considered Options

- Do not remove :: 
- Asynchronously :: remove them with a cron job, kinda like garbage
  collection
- Synchronously :: remove them when the status of the document is set
  to finished

** Decision Outcome

Chosen option: "Asynchronously", because this keeps the two issues
separate. The state is changed immediately but the garbage is cleaned
up later/asynchronously.

*** Positive Consequences

- The response to state change is fast, as the clean is done later

*** Negative Consequences

- No user feedback that the cleanup is done

** Pros and Cons of the Options

*** Do not remove

- Good :: easy to implement
- Good :: predictable
- Bad :: waste of disc space
- Bad :: unknown words query will get slower

*** Asynchronously

The status is changed by the user but the cleanup is done
independently sometime later.

- Good :: relatively simple to implement as they are independent parts
  with no UI
- Bad :: errors are only visible to the administrators
  - but the users are not interested in these kinds of errors

*** Synchronously

The status is changed by the user and the cleanup is part of it.

- Good :: predictable
- Good :: feedback to the user if anything fails
- Bad :: state change request takes a long time
- Bad :: quite a bit of effort to implement

** Links

- [[https://github.com/sbsdev/daisyproducer2/blob/8fb6d4e4dd26e326be8050c6db2b98b9c4452fdd/src/clj/daisyproducer2/whitelists/async.clj#L60][See how cron jobs are handled for global white lists]]
- https://github.com/sbsdev/daisyproducer2/commit/94974e90a2ec28e8d6786fc28b11ecaa254c925b

* ACCEPTED Pagination for versions and images
CLOSED: [2024-02-15 Do 16:37]
- Deciders :: CE
- Date :: [2024-02-14 Mi]

The unknown words do have pagination. To be orthogonal it seems
logical that the list of versions and images also have pagination

** Context and Problem Statement

Pagination makes the version and image pages much more complicated
especially in the light of deletion of single elements. With
pagination we will have to do a re-fetch each time you delete an
element, so we can have a full window of elements again.

** Decision Drivers

- the old UI did *not* have pagination
- at least for versions we rarely have more than a handful of versions
  - so pagination seems pointless
- there is search on the page
- I don't think the users want to paginate through images let alone
  versions
- the code is much more complicated

** Considered Options

- Dropping pagination :: for images and versions
- Implementing pagination :: for images and versions

** Decision Outcome

Chosen option: "Dropping pagination", because the cost of maintaining
it is too high compared with the user benefit.

*** Positive Consequences

- Code is much simpler
- no weird re-draw effects when re-fetching the items

*** Negative Consequences

- The user cannot paginate.

** Links

- https://github.com/sbsdev/daisyproducer2/commit/fdb4de711de77f710fe6bd970c19c903772b41ca
- https://github.com/sbsdev/daisyproducer2/commit/62609888ae0442daa7de40bf0cb79665f689543b

* COMMENT [short title of solved problem and solution]                     :Template:
# - Status :: [proposed | rejected | accepted | deprecated | ... |
#   superseded by [[file:0005-example.md][ADR-0005]]]
- Deciders :: [list everyone involved in the decision]
- Date :: [YYYY-MM-DD when the decision was last updated]

Technical Story: [description | ticket/issue URL]

** Context and Problem Statement

[Describe the context and problem statement, e.g., in free form using
two to three sentences. You may want to articulate the problem in form
of a question.]

** Decision Drivers

- [driver 1, e.g., a force, facing concern, ...]
- [driver 2, e.g., a force, facing concern, ...]
- ...

** Considered Options

- [option 1]
- [option 2]
- [option 3]
- ...

** Decision Outcome

Chosen option: "[option 1]", because [justification. e.g., only option,
which meets k.o. criterion decision driver | which resolves force force
| ... | comes out best (see below)].

*** Positive Consequences

- [e.g., improvement of quality attribute satisfaction, follow-up
  decisions required, ...]
- ...

*** Negative Consequences

- [e.g., compromising quality attribute, follow-up decisions required,
  ...]
- ...

** Pros and Cons of the Options

*** [option 1]

[example | description | pointer to more information | ...]

- Good, because [argument a]
- Good, because [argument b]
- Bad, because [argument c]
- ...

*** [option 2]

[example | description | pointer to more information | ...]

- Good, because [argument a]
- Good, because [argument b]
- Bad, because [argument c]
- ...

*** [option 3]

[example | description | pointer to more information | ...]

- Good, because [argument a]
- Good, because [argument b]
- Bad, because [argument c]
- ...

** Links

- [Link type] [Link to ADR]
- ...
