# -*- mode: restclient; -*-

#################################
# Manual tests for the REST API #
#################################

:auth-token = Token <my-secret-token>

########
# Auth #
########

# Get a token
POST http://localhost:3000/api/login
Content-Type: application/json
{
  "username": "ada",
  "password": "lovelace"
}

# Get a token
POST http://localhost:3000/api/login
Content-Type: application/json
{
  "username": "berta",
  "password": "lovelace"
}

#############
# Documents #
#############

# Get documents
GET http://localhost:3000/api/documents

# Get one document
GET http://localhost:3000/api/documents?limit=1

# Get a specific document
GET http://localhost:3000/api/documents/644

# Get a specific document in the form of transit
GET http://localhost:3000/api/documents/644
Accept: application/transit+json

# Search a specific document by title
GET http://localhost:3000/api/documents?search=verona

# Add a document
# doesn't seem to be implemented
POST http://localhost:3000/api/documents
Authorization: :auth-token
Content-Type: application/json
{
  "title": "Hehe",
  "creator": "Foo",
  "description": "not much",
  "source": "978-3-257-07184-11",
  "language": "de",
  "source_date": "2022-06-16",
  "source_publisher": "Vargos",
  "library_number": "PNX 9435",
  "state": "new",
  "identifier": "978-3-570-15263-0",
  "revision": 0,
  "date": "2022-11-22"
}

# Delete a document
# doesn't seem to be implemented
DELETE http://localhost:3000/api/documents/31411
Authorization: :auth-token

# Set the state of a production to open
# should produce a 204
PATCH http://localhost:3000/api/documents/611
Accept: application/json
Content-Type: application/json
Authorization: :auth-token
{
 "state": "open"
}

# Set the state of a production to closed
# should produce a 400 as it is already closed
PATCH http://localhost:3000/api/documents/611
Accept: application/json
Content-Type: application/json
Authorization: :auth-token
{
 "state": "closed"
}

# Set the state of a non-existing production to closed
# should produce a 404
PATCH http://localhost:3000/api/documents/301111111
Accept: application/json
Content-Type: application/json
Authorization: :auth-token
{
 "state": "closed"
}

# Set the state of a production to an invalid state
# should produce a 400
PATCH http://localhost:3000/api/documents/611
Accept: application/json
Content-Type: application/json
Authorization: :auth-token
{
 "state": "haha"
}

##############
# # Versions #
##############

# Get all versions for a document
GET http://localhost:3000/api/documents/105/versions

GET http://localhost:3000/api/documents/105/versions?latest=false

# Search a version for a document
GET http://localhost:3000/api/documents/105/versions?search=hallo

# Get a specific version
GET http://localhost:3000/api/documents/105/versions/8212

# Get a specific non-existing version
GET http://localhost:3000/api/documents/105/versions/0

# Get the latest version
GET http://localhost:3000/api/documents/105/versions?latest=true

# Get xml for a version
GET http://localhost:3000/api/documents/105/versions/8532/xml

# Add a version
:version := (with-temp-buffer (insert-file-contents "~/tmp/6304.xml") (buffer-string))

POST http://localhost:3000/api/documents/105/versions
Authorization: :auth-token
Content-Type: multipart/form-data; boundary=e82bc39c68f1417d9ea12c5456182f3c

--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="file"; filename="6304.xml"
Content-Type: application/xml

:version
--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="comment"

just a comment
--e82bc39c68f1417d9ea12c5456182f3c--

# Delete a non-existing version
DELETE http://localhost:3000/api/documents/105/versions/0
Authorization: :auth-token

# Delete an existing version
DELETE http://localhost:3000/api/documents/105/versions/8449
Authorization: :auth-token

# Delete old versions
DELETE http://localhost:3000/api/documents/105/versions
Authorization: :auth-token

##########
# Images #
##########

# Get all images for a document
GET http://localhost:3000/api/documents/644/images

# Get a specific image
GET http://localhost:3000/api/documents/644/images/6419

# Get a specific non-existing image
GET http://localhost:3000/api/documents/644/images/0

# Limit the results
GET http://localhost:3000/api/documents/576/images?limit=2

# Limit the results and use an offset
GET http://localhost:3000/api/documents/576/images?limit=2&offset=20

# Search an image
GET http://localhost:3000/api/documents/576/images?search=p015

# Add an image
:image := (with-temp-buffer (insert-file-contents "~/tmp/lambda.jpg") (buffer-string))

POST http://localhost:3000/api/documents/644/images
Authorization: :auth-token
Content-Type: multipart/form-data; boundary=e82bc39c68f1417d9ea12c5456182f3c

--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="file"; filename="lambda.jpg"
Content-Type: application/jpg

:image
--e82bc39c68f1417d9ea12c5456182f3c--

# Delete a non-existing image
DELETE http://localhost:3000/api/documents/644/images/0
Authorization: :auth-token

# Delete an existing image
DELETE http://localhost:3000/api/documents/644/images/6692
Authorization: :auth-token

# Delete all images
DELETE http://localhost:3000/api/documents/105/images
Authorization: :auth-token

###########
# Metrics #
###########

# Get Metrics
GET http://localhost:3000/metrics

###########
# Preview #
###########

# Get EPUB
GET http://localhost:3000/api/documents/412/preview/epub

#########
# Words #
#########

# Get all global words
GET http://localhost:3000/api/words?limit=2

# Get all global words with type 3
GET http://localhost:3000/api/words?type=3&limit=2

# Search a global word
GET http://localhost:3000/api/words?search=steuerfahndung

# Search a global word
GET http://localhost:3000/api/words?search=^steuerfahndung

# Search a global word with type
GET http://localhost:3000/api/words?search=aber&type=3

# Add a global word
PUT http://localhost:3000/api/words
Authorization: :auth-token
Content-Type: application/json
{
	"untranslated": "veryveryveryveryveryveryveryveryverylong",
	"type": 0,
	"uncontracted": "VERY",
	"contracted": "VVVL",
	"homograph-disambiguation": ""
}

#################
# Unknown words #
#################

# Get all unknown words
GET http://localhost:3000/api/documents/105/unknown-words?grade=0

# Get the total number of unknown words
HEAD http://localhost:3000/api/documents/105/unknown-words?grade=0

# Get one unknown word
GET http://localhost:3000/api/documents/105/unknown-words?grade=0&limit=1

# Update an unknown word
PUT http://localhost:3000/api/documents/105/unknown-words
Authorization: :auth-token
Content-Type: application/json
{
    	"untranslated": "langstreckenlesen",
    	"type": 0,
    	"homograph-disambiguation": "",
    	"document-id": 105,
    	"isignored": true,
    	"islocal": false
}

# Update a non-existing unknown word
PUT http://localhost:3000/api/documents/105/unknown-words
Authorization: :auth-token
Content-Type: application/json
{
    	"untranslated": "not-existing",
    	"type": 0,
    	"homograph-disambiguation": "",
    	"document-id": 105,
    	"isignored": true,
    	"islocal": false
}

#####################
# Confirmable words #
#####################

# Confirmable words
GET http://localhost:3000/api/confirmable

######################################
# Manual tests for the static routes #
######################################

# Get the DTBook xml for a version
GET http://localhost:3000/archive/105/versions/01HPP0222GAKKFVZA94WN5RFE8.xml

# Get an image
GET http://localhost:3000/archive/105/images/lambda.jpg
