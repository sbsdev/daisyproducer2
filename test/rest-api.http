# -*- mode: restclient; -*-

#################################
# Manual tests for the REST API #
#################################

:auth-token = Token <my-secret-token>

########
# Auth #
########

# Get a token
POST http://localhost:3000/api/login
Content-Type: application/json
{
  "username": "ada",
  "password": "lovelace"
}

# Get a token
POST http://localhost:3000/api/login
Content-Type: application/json
{
  "username": "berta",
  "password": "lovelace"
}

#############
# Documents #
#############

# Get documents
GET http://localhost:3000/api/documents

# Get one document
GET http://localhost:3000/api/documents?limit=1

# Get a specific document
GET http://localhost:3000/api/documents/644

# Get a specific document in the form of transit
GET http://localhost:3000/api/documents/644
Accept: application/transit+json

# Search a specific document by title
GET http://localhost:3000/api/documents?search=verona

# Add a document
POST http://localhost:3000/api/productions
Authorization: :auth-token
Content-Type: application/json
{
  "title": "Hehe",
  "creator": "Foo",
  "description": "not much",
  "source": "978-3-257-07184-11",
  "language": "de",
  "source_date": "2022-06-16",
  "source_publisher": "Vargos",
  "library_number": "PNX 9435",
  "state": "new",
  "identifier": "978-3-570-15263-0",
  "revision": 0,
  "date": "2022-11-22"
}

# Add a production using transit
POST http://localhost:3000/api/productions
Authorization: :auth-token
Content-Type: application/transit+json
[
  "^ ",
  "~:description",
  "Der Held muss in die Welt hinaus und Abenteuer erleben, um ein Held zu werden. Und was ist mit der Heldin? Doris Dörrie erzählt von drei Reisen nach San Francisco, Japan und Marokko und davon, als Frau in der Welt unterwegs zu sein. Sich dem Ungewissen, Fremden auszusetzen heisst immer auch, den eigenen Ängsten, Abhängigkeiten, Verlusten ins Auge zu sehen. Und dabei zur Heldin der eigenen Geschichte zu werden.",
  "~:creator",
  "Dörrie, Doris",
  "~:source",
  "978-3-257-07184-9",
  "~:title",
  "Die Heldin reist",
  "~:source_publisher",
  "Diogenes",
  "~:language",
  "de",
  "~:source_date",
  [
    "~#LocalDate",
    "2022-01-01"
  ],
  "~:library_number",
  "PNX 9434",
  "~:revision",
  0,
  "~:state",
  "new",
  "~:identifier",
  "978-3-570-15263-0",
  "~:date",
  [
    "~#LocalDate",
    "2022-01-01"
  ]
]

# Delete a document
DELETE http://localhost:3000/api/documents/31411
Authorization: :auth-token

##############
# # Versions #
##############

# Get all versions for a document
GET http://localhost:3000/api/documents/105/versions

GET http://localhost:3000/api/documents/105/versions?latest=false

# Search a version for a document
GET http://localhost:3000/api/documents/105/versions?search=hallo

# Get a specific version
GET http://localhost:3000/api/documents/105/versions/8212

# Get a specific non-existing version
GET http://localhost:3000/api/documents/105/versions/0

# Get the latest version
GET http://localhost:3000/api/documents/105/versions?latest=true

# Get xml for a version
GET http://localhost:3000/api/documents/105/versions/8532/xml

# Add a version
:version := (with-temp-buffer (insert-file-contents "~/tmp/6304.xml") (buffer-string))

POST http://localhost:3000/api/documents/105/versions
Authorization: :auth-token
Content-Type: multipart/form-data; boundary=e82bc39c68f1417d9ea12c5456182f3c

--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="file"; filename="6304.xml"
Content-Type: application/xml

:version
--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="comment"

just a comment
--e82bc39c68f1417d9ea12c5456182f3c--

# Delete a non-existing version
DELETE http://localhost:3000/api/documents/105/versions/0
Authorization: :auth-token

# Delete an existing version
DELETE http://localhost:3000/api/documents/105/versions/8449
Authorization: :auth-token

##########
# Images #
##########

# Get all images for a document
GET http://localhost:3000/api/documents/644/images

# Get a specific image
GET http://localhost:3000/api/documents/644/images/6419

# Get a specific non-existing image
GET http://localhost:3000/api/documents/644/images/0

# Limit the results
GET http://localhost:3000/api/documents/576/images?limit=2

# Limit the results and use an offset
GET http://localhost:3000/api/documents/576/images?limit=2&offset=20

# Search an image
GET http://localhost:3000/api/documents/576/images?search=p015

# Add an image
:image := (with-temp-buffer (insert-file-contents "~/tmp/lambda.jpg") (buffer-string))

POST http://localhost:3000/api/documents/644/images
Authorization: :auth-token
Content-Type: multipart/form-data; boundary=e82bc39c68f1417d9ea12c5456182f3c

--e82bc39c68f1417d9ea12c5456182f3c
Content-Disposition: form-data; name="file"; filename="lambda.jpg"
Content-Type: application/jpg

:image
--e82bc39c68f1417d9ea12c5456182f3c--

# Delete a non-existing image
DELETE http://localhost:3000/api/documents/644/images/0
Authorization: :auth-token

# Delete an existing image
DELETE http://localhost:3000/api/documents/644/images/6692
Authorization: :auth-token

# Delete all images
DELETE http://localhost:3000/api/documents/105/images
Authorization: :auth-token

###########
# Metrics #
###########

# Get Metrics
GET http://localhost:3000/metrics

###########
# Preview #
###########

# Get EPUB
GET http://localhost:3000/api/documents/412/preview/epub

#########
# Words #
#########

# Get all global words
GET http://localhost:3000/api/words?limit=2

# Get all global words with type 3
GET http://localhost:3000/api/words?type=3&limit=2

# Search a global word
GET http://localhost:3000/api/words?search=steuerfahndung

# Search a global word
GET http://localhost:3000/api/words?search=^steuerfahndung

# Search a global word with type
GET http://localhost:3000/api/words?search=aber&type=3

# Add a global word
PUT http://localhost:3000/api/words
Authorization: :auth-token
Content-Type: application/json
{
	"untranslated": "veryveryveryveryveryveryveryveryverylong",
	"type": 0,
	"uncontracted": "VERY",
	"contracted": "VVVL",
	"homograph-disambiguation": ""
}

#################
# Unknown words #
#################

# Get all unknown words
GET http://localhost:3000/api/documents/105/unknown-words?grade=0

# Get one unknown word
GET http://localhost:3000/api/documents/105/unknown-words?grade=0&limit=1

# Update an unknown word
PUT http://localhost:3000/api/documents/105/unknown-words
Authorization: :auth-token
Content-Type: application/json
{
    	"untranslated": "langstreckenlesen",
    	"type": 0,
    	"homograph-disambiguation": "",
    	"document-id": 105,
    	"isignored": true,
    	"islocal": false
}

# Update a non-existing unknown word
PUT http://localhost:3000/api/documents/105/unknown-words
Authorization: :auth-token
Content-Type: application/json
{
    	"untranslated": "not-existing",
    	"type": 0,
    	"homograph-disambiguation": "",
    	"document-id": 105,
    	"isignored": true,
    	"islocal": false
}

#####################
# Confirmable words #
#####################

# Confirmable words
GET http://localhost:3000/api/confirmable

